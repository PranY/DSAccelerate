from src.data.make_dataset import read_csv_file
from src.models.data_split import ModelDataSplitter
from src.models.train_model import ModelTraining
from src.visualization.visualize import Visualization
import os
import pandas as pd

import constant as const
column_list = ["orderStatus", "addressstaticfeatures_haszipcode", "addressstaticfeatures_isshipaddresscityissameaszipcodecity", "addressstaticfeatures_isshipaddressstateissameaszipcodestate"]#, "addressstaticfeatures_hasdigits", "addressstaticfeatures_countdigits", "addressstaticfeatures_length", "addressstaticfeatures_lengthtodigitsratio", "addressstaticfeatures_isofficeaddress", "addressstaticfeatures_isshipaddresshostel", "addressstaticfeatures_hassecondfield", "addressstaticfeatures_samebillshippaddress", "addressstaticfeatures_countvowels", "addressstaticfeatures_countwords", "addressstaticfeatures_countcommas", "addressstaticfeatures_hasroadsfield", "addressstaticfeatures_hassquarefield", "addressstaticfeatures_hashousefield", "addressstaticfeatures_haslandmarkfield", "addressstaticfeatures_hashostelfield", "addressstaticfeatures_hasbuildingfield", "addressstaticfeatures_haspoifield", "addressstaticfeatures_hascollegefield", "addressstaticfeatures_hashindifield", "addressstaticfeatures_hasunitfield", "addressstaticfeatures_hasblockfield", "addressstaticfeatures_hassocietyfield", "addressstaticfeatures_hasstreetfield", "addressstaticfeatures_haslocalityfield", "addressstaticfeatures_hascityfield", "addressstaticfeatures_hasstatefield", "addressstaticfeatures_hascountryfield", "addressstaticfeatures_hasunassignedfield", "addressstaticfeatures_ismergeaddresslong", "addressstaticfeatures_isdigitinshipaddress", "addressstaticfeatures_isdigitandzipcodegood", "addressstaticfeatures_istestinmergeaddress", "addressstaticfeatures_counttokens", "addressstaticfeatures_iszipcodeformatcorrect", "addressstaticfeatures_iszipcodenotgood", "addressstaticfeatures_iscountryindia", "addressstaticfeatures_iscountryempty", "addressstaticfeatures_isstateempty", "addressstaticfeatures_isstateunionterritory", "addressstaticfeatures_iscityempty", "addressstaticfeatures_iscityinaddcloud", "addressstaticfeatures_iscityinstate", "addressstaticfeatures_isunitfloor", "addressstaticfeatures_isunitnumericinsociety", "addressstaticfeatures_countunittokens", "addressstaticfeatures_isinformative", "addressstaticfeatures_iscorrect", "addressstaticfeatures_ismonkeytyped", "statestaticfeatures_population", "statestaticfeatures_decadalgrowth", "statestaticfeatures_ruralpopulation", "statestaticfeatures_urbanpopulation", "statestaticfeatures_density", "statestaticfeatures_urbanpercentage", "statestaticfeatures_ruralpercentage", "statestaticfeatures_populationpercentage", "statestaticfeatures_iscityhighlypopulous", "citystaticfeatures_citytier", "citystaticfeatures_area", "addressstaticfeatures_mergescore", "addressstaticfeatures_mergescorenonzeros", "devicestaticfeatures_devicetype", "devicestaticfeatures_devicemodel", "devicestaticfeatures_isbot", "devicestaticfeatures_devicebrand", "devicestaticfeatures_devicebotinfo", "devicestaticfeatures_osname", "devicestaticfeatures_utmsource", "devicestaticfeatures_search", "devicestaticfeatures_osfamily", "devicestaticfeatures_osplatform", "devicestaticfeatures_clientname", "devicestaticfeatures_clientengine", "devicestaticfeatures_clienttype", "devicestaticfeatures_clientshortname", "emailstaticfeatures_length", "emailstaticfeatures_countdigits", "emailstaticfeatures_hasrepeatedcharacters", "emailstaticfeatures_hasconsecutivekeys", "emailstaticfeatures_hasattherate", "emailmerchantfeatures_istemporarydomain", "phonestaticfeatures_countdistinctdigits", "phonestaticfeatures_length", "phonestaticfeatures_isphonevalid", "generic_dayofmonth", "generic_dayofweek", "generic_hourofday", "emailglobalfeatures_rtopercent", "emailglobalfeatures_deliveredpercent", "emailglobalfeatures_cancelpercent", "emailglobalfeatures_returnpercent", "emailglobalfeatures_countprepaidorders", "emailglobalfeatures_countcodorders", "emailglobalfeatures_countrtoitems", "emailglobalfeatures_countdelivereditems", "emailglobalfeatures_countreturnitems", "emailglobalfeatures_countcancelitems", "emailglobalfeatures_countordereditems", "phoneglobalfeatures_countprepaidorders", "phoneglobalfeatures_countcodorders", "phoneglobalfeatures_rtopercent", "phoneglobalfeatures_deliveredpercent", "phoneglobalfeatures_cancelpercent", "phoneglobalfeatures_returnpercent", "phoneglobalfeatures_countordereditems", "phoneglobalfeatures_countrtoitems", "phoneglobalfeatures_countdelivereditems", "phoneglobalfeatures_countreturnitems", "phoneglobalfeatures_countcancelitems", "deviceidmerchantfeatures_rtopercent", "deviceidmerchantfeatures_countdistinctphones", "deviceidmerchantfeatures_countdistinctemails", "deviceidmerchantfeatures_countprepaidorders", "deviceidmerchantfeatures_countcodorders", "deviceidglobalfeatures_countprepaidorders", "deviceidglobalfeatures_countcodorders", "deviceidglobalfeatures_rtopercent", "deviceidglobalfeatures_deliveredpercent", "deviceidglobalfeatures_cancelpercent", "deviceidglobalfeatures_returnpercent", "deviceidglobalfeatures_countordereditems", "deviceidglobalfeatures_countrtoitems", "deviceidglobalfeatures_countdelivereditems", "deviceidglobalfeatures_countreturnitems", "deviceidglobalfeatures_countcancelitems", "ipglobalfeatures_rtopercent", "ipglobalfeatures_deliveredpercent", "ipglobalfeatures_cancelpercent", "ipglobalfeatures_returnpercent", "ipglobalfeatures_countordereditems", "ipglobalfeatures_countrtoitems", "ipglobalfeatures_countdelivereditems", "ipglobalfeatures_countreturnitems", "ipglobalfeatures_countcancelitems", "ipglobalfeatures_countprepaidorders", "ipglobalfeatures_countcodorders", "zipcodeglobalfeatures_rtopercent", "zipcodeglobalfeatures_deliveredpercent", "zipcodeglobalfeatures_cancelpercent", "zipcodeglobalfeatures_returnpercent", "zipcodemerchantfeatures_deliveredpercent", "zipcodemerchantfeatures_rtopercent", "zipcodeglobalfeatures_countordereditems", "zipcodeglobalfeatures_countrtoitems", "zipcodeglobalfeatures_countdelivereditems", "zipcodeglobalfeatures_countreturnitems", "zipcodeglobalfeatures_countcancelitems", "zipcodemerchantfeatures_countdelivereditems", "zipcodemerchantfeatures_countrtoitems", "zipcodemerchantfeatures_countcancelitems", "zipcodemerchantfeatures_countreturnitems", "zipcodeglobalfeatures_countprepaidorders", "zipcodeglobalfeatures_countcodorders", "citymerchantfeatures_deliveredpercent", "citymerchantfeatures_rtopercent", "cityglobalfeatures_countrtoitems", "cityglobalfeatures_countdelivereditems", "cityglobalfeatures_countreturnitems", "cityglobalfeatures_countcancelitems", "citymerchantfeatures_countdelivereditems", "citymerchantfeatures_countrtoitems", "citymerchantfeatures_countcancelitems", "citymerchantfeatures_countreturnitems", "cityglobalfeatures_countordereditems", "cityglobalfeatures_countprepaidorders", "cityglobalfeatures_countcodorders", "cityglobalfeatures_rtopercent", "cityglobalfeatures_deliveredpercent", "cityglobalfeatures_returnpercent", "cityglobalfeatures_cancelpercent", "statemerchantfeatures_deliveredpercent", "statemerchantfeatures_rtopercent", "statemerchantfeatures_countdelivereditems", "statemerchantfeatures_countrtoitems", "statemerchantfeatures_countcancelitems", "statemerchantfeatures_countreturnitems", "zipcodemerchantfeatures_returnedpercent", "zipcodemercantfeatures_cancelpercent", "citymerchantfeatures_returnedpercent", "citymercantfeatures_cancelpercent", "statemerchantfeatures_returnedpercent", "statemercantfeatures_cancelpercent", "deviceidmerchantfeatures_isfirsttimeuser", "addressstaticfeatures_hasplaceofinterestfield", "addressstaticfeatures_manualaddressflag", "devicestaticfeatures_isshipaddresscityissameasipaddresscity", "addressstaticfeatures_haslandmarkfield2", "addressstaticfeatures_hasrepeatedpatternsmonkeytyping", "cod_intelligence_enabled", "experimentation", "status", "producer_timestamp", "order_id", "producer_created_date"]
data = read_csv_file("~/Downloads/old_df.csv").reindex(columns=column_list)#.loc[: ,column_list]
y = pd.get_dummies(data[const.label])
data[const.label] = y['red']
#.drop(['iin', 'doppler_sorted_terminals', 'payment_id', 'terminal_id', 'card_id'], axis=1)#.drop('doppler_sorted_terminals', axis=1)

# data = read_csv_file("~/Downloads/archive/Iris.csv")
ModelDataSplitter(data).do_data_split()
path = os.path.join("data", "interim")
X_train = read_csv_file(os.path.join(path, "train.csv"))
X_val = read_csv_file(os.path.join(path, "validate.csv"))
X_test = read_csv_file(os.path.join(path, "test.csv"))

#__init__(self, training_data, label_name, best_model_metric, model_save_location, model_algorithm_name=None):

model = ModelTraining(X_train, const.label, const.evaluation, "models/")
model.train_models()
best_model = model.evaluate_model()
print(" best_model is ", best_model)
Visualization(X_train, X_test, X_val, best_model, const.label).visualize()
